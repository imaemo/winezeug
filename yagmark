#!/bin/sh
# Yet Another Graphics Benchmark
# Automated script to measure Win32 graphics performance
# Copyright 2010 Dan Kegel.
# Licence: LGPL (for winehq compatibility)
#
# To run on Windows, please use cygwin.
# When running on Windows Vista or 7, disable UAC and reboot, or Autohotkey won't be able to script the installers.
# On any OS, you'll want to install the packages
#  svn cabextract unzip wget
# and then do something like
#  svn checkout http://winezeug.googlecode.com/svn/trunk/ winezeug
#  cd winezeug
#  sh yagmark 3dmark2000
# On Windows 7, you have to mark the installed 3dmark2000/3dmark2001/3dmark06 executables as needing Windows XP compatibility mode, or they will not run.

WINEPREFIX="${WINEPREFIX:-$HOME/.wine-yagmark}"
export WINEPREFIX

case "$OS" in
 "Windows_NT")
    WINE=""
    DRIVE_C="C:/"
    XXXPATH=cygpath
    # Mysterious workaround for quoting difference between cygwin and linux
    backslash='\'
    ;;
 *)
    WINE=${WINE:-wine}
    DRIVE_C="$WINEPREFIX/drive_c"
    XXXPATH="$WINE winepath"
    # Mysterious workaround for quoting difference between cygwin and linux
    backslash='\\'
    ;;
esac
export WINE

# The folder-name is localized!
programfilesdir_win="`unset WINEDEBUG; WINEDLLOVERRIDES=mshtml= $WINE cmd.exe /c echo "%ProgramFiles%" | tr -d '\015'`"
test x"$programfilesdir_win" != x || die "$WINE cmd.exe /c echo '%ProgramFiles%' returned empty string"
programfilesdir_unix="`unset WINEDEBUG; $XXXPATH -u "$programfilesdir_win" | tr -d '\015' `"
test x"$programfilesdir_unix" != x || die "winepath -u $programfilesdir_win returned empty string"

# 64 bit windows has a second directory for program files
programfilesdir_x86_win="${programfilesdir_win} (x86)"
programfilesdir_x86_unix="${programfilesdir_unix} (x86)"
if ! test -d "$programfilesdir_x86_unix"
then
    programfilesdir_x86_win="${programfilesdir_win}"
    programfilesdir_x86_unix="${programfilesdir_unix}"
fi

YAGMARK_TMP="$DRIVE_C"/yagmarktmp
YAGMARK_TMP_WIN='c:\yagmarktmp'
YAGMARK_RESULTS="$DRIVE_C"/yagmarkresults
YAGMARK_RESULTS_WIN='c:\yagmarkresults'

olddir=`pwd`

rm -rf "$YAGMARK_TMP"
mkdir -p "$YAGMARK_TMP"
mkdir -p "$YAGMARK_RESULTS"

cputype=`cat /proc/cpuinfo | egrep 'model name' | 
        awk '{print $8}' | uniq`

host=`hostname | sed 's/\..*//'`    

case "$OS" in
"Windows_NT")
    systeminfo | tee "$YAGMARK_TMP"/sysinfo.txt
    # Dirty code to simplify os name
    osname=`grep "OS Name" "$YAGMARK_TMP"/sysinfo.txt | sed 's/.*Microsoft.*Windows //;s/VistaT/Vista/;s/ .*//'`
    wineversion=""
    dxdiag -t "$YAGMARK_TMP_WIN"\\dxdiaginfo.txt
    echo "--------------- dxdiag ---------------" >> "$YAGMARK_TMP"/sysinfo.txt
    cat "$YAGMARK_TMP"/dxdiaginfo.txt >> "$YAGMARK_TMP"/sysinfo.txt
    gputype=`grep 'Card name' < "$YAGMARK_TMP"/dxdiaginfo.txt |
            awk '{print $5"_"$6}'`
    ;;
*) 
    # note: next line contains a tab
    osname=`lsb_release -d | sed 's/.*://;s/^[ 	]*//;s/ /_/g'`
    wineversion=`$WINE --version`
    (lspci || /sbin/lspci || /usr/sbin/lspci) > "$YAGMARK_TMP"/sysinfo.txt
    gputype=`cat "$YAGMARK_TMP"/sysinfo.txt | grep VGA |
             sed -e 's/.*\[//;s/]\.*//;s/ (.*//;s/GeForce //;s/ /_/g'`
    
    ;;
esac

# Put wine version last, since it's so long
SYSTEMID="$cputype-"$gputype"-$osname-$host-$wineversion"

#----------------------------------------------------------------

ahk_do()
{
   echo "$@" | sed "s/\$//" > "$YAGMARK_TMP"/tmp.ahk
   $WINE "$programfilesdir_x86_unix/AutoHotkey/AutoHotkey.exe" "$YAGMARK_TMP"/tmp.ahk
}

#----------------------------------------------------------------

run_clear()
{
    rm -f "$YAGMARK_RESULTS"/*
}

#----------------------------------------------------------------

run_3dmark2000()
{
    exe_dir="$programfilesdir_x86_unix/MadOnion.com/3DMark2000"
    rm -f "$YAGMARK_RESULTS"/3dmark2000.*

    SAVE_PATH="$YAGMARK_RESULTS_WIN${backslash}3dmark2000"

    # Install if needed
    if ! test -f "$exe_dir/3DMark2000.exe"
    then
        sh wisotool 3dmark2000
    fi
    cd "$exe_dir"
    ahk_do "
        SetTitleMatchMode, 2
        run, .${backslash}3DMark2000.exe
        winwait, 3DMark2000, Welcome
        ; Uncomment these ten lines to do just a tiny benchmark during debugging
        ;ControlClick, New, 3DMark2000, Welcome
        ;sleep 1000
        ;send {escape}
        ;send !fn
        ;send c
        ;winwait, Select Tests
        ;send c
        ;send !p
        ;send {Enter}
        ;sleep 1000
        send b
        winwait, Overall Score
        sleep 1000
        send {ESC}
        winwaitactive, 3DMark2000
        sleep 500
        ; Save it once with default type so we don't get the kamikaze dialog box on exit
        send ^s
        winwait, Save
        send {DEL 8}
        send $SAVE_PATH
        send {Enter}
        ; Save it again with .txt, which is what we really want
        send !fa
        winwait, Save
        send !t3
        send {Enter}
        sleep 500
        send !fx
        sleep 1000
        send n
        WinClose
        sleep 500
        send {Enter}
        WinWaitClose, 3DMark2000
        "
    cd "$YAGMARK_RESULTS"
    # Parse results, add prefix, and make parse-friendly
    sed '1,/Platform/d;
        /Fill Rate/,$d;
        s/^/3dmark2000_/;
        s/[- _][- _]*/_/g' 3dmark2000.txt > 3dmark2000.parsed
    if test -s 3dmark2000.parsed
    then
        cat 3dmark2000.parsed
    else
        echo "No results?"
        rm 3dmark2000.parsed
    fi
    cd "$olddir"
}

run_3dmark2001()
{
    exe_dir="$programfilesdir_x86_unix/MadOnion.com/3DMark2001 SE"
    rm "$YAGMARK_RESULTS"/3dmark2001.*
    SAVE_PATH="$YAGMARK_RESULTS_WIN${backslash}3dmark2001"

 # Install if needed
    if ! test -f "$exe_dir/3DMark2001SE.exe"
    then
        sh wisotool 3dmark2001
    fi
    cd "$exe_dir"
    ahk_do "
        SetTitleMatchMode, 2
        run, 3DMark2001SE.exe
        winwait, 3DMark2001
        sleep 500
        ; Uncomment next 7 lines to do just a tiny benchmark during debugging
        ;send c
        ;winwait, Select Tests
        ;sleep 500
        ;send c
        ;send f
        ;send {Enter}
        ;sleep 500
        send b
        winwaitactive, Overall Score
        sleep 1000
        send l
        sleep 500
        send ^s
        winwait, Save As
        send {DEL 8}
        send $SAVE_PATH
        send !t3
        send {Enter}
        sleep 500
        send !fx
        sleep 1000
        WinWaitClose, 3DMark2001
        "
    cd "$YAGMARK_RESULTS"
    # Parse results, add prefix, and make parse-friendly
    sed '1,/RESULTS/d;
        /Fill Rate/,$d;
        s/^/3dmark2001_/;
        s/[- _][- _]*/_/g;
        s/_fps/ fps/' 3dmark2001.txt > 3dmark2001.parsed
    if test -s 3dmark2001.parsed
    then
        cat 3dmark2001.parsed
    else
        echo "No results?"
        rm 3dmark2001.parsed
    fi
    cd "$olddir"
}

run_3dmark06()
{
    exe_dir="$programfilesdir_x86_unix/Futuremark/3DMark06"

    SAVE_PATH="$YAGMARK_RESULTS_WIN${backslash}3dmark06"

    # TODO: add an "if workaround_wine_bug" around -nosysteminfo
    ARGS="-nosysteminfo"
    case "$OS" in
    "Windows_NT") ARGS="" ;;
    esac

    # Install if needed
    if ! test -f "$exe_dir/3DMark06.exe"
    then
        sh wisotool 3dmark06
    fi

    cd "$exe_dir"
    ahk_do "
        SetTitleMatchMode, 2
        run, 3DMark06.exe $ARGS
        winwait, Please Register
        sleep 10000
        ;ControlClick, Button3
        send {tab 2}{space}
        winwait, Tip Of The Day
        sleep 500
        send {ESC}
        sleep 500
        send {Enter}
        winwait, 3DMark Score
        sleep 500
        send {tab}
        send {space}
        winwait, Save
        send {DEL 8}
        send $SAVE_PATH
        send {Enter}
        sleep 500
        send {ESC}
        winkill 3DMark06
        "
    mv "$YAGMARK_RESULTS"/3dmark06.3dr "$YAGMARK_RESULTS"/3dmark06.zip
    unzip -o "$YAGMARK_RESULTS"/3dmark06.zip Result.xml
    # fixme: Parse more results out of the xml file!!
    tr -d '\000' < Result.xml > "$YAGMARK_RESULTS"/3dmark06.xml
    echo -n "3DMark06_result: " > "$YAGMARK_RESULTS"/3dmark06.txt
    grep 3DMarks < "$YAGMARK_RESULTS"/3dmark06.xml | sed 's,</.*,,;s,.*>,,;s,\..*,,' >> "$YAGMARK_RESULTS"/3dmark06.txt
    cat "$YAGMARK_RESULTS"/3dmark06.txt
    cd "$olddir"
}

run_re5bench()
{
    exedir="$programfilesdir_x86_unix/CAPCOM/RESIDENT EVIL 5 Benchmark Version"
    exe="$exedir/RE5DX9.EXE"

    # Install if needed
    if ! test -f "$exe"
    then
        sh wisotool re5bench
    fi

    # Can this be scraped/controlled at all with autohotkey?  Maybe if run in window...
    cd "$exedir"
    $WINE "$exe"
    cd "$olddir"
}

run_unigine_heaven()
{
    exedir="$programfilesdir_x86_unix/Unigine/Heaven"
    exe="$exedir/Heaven_d3d9.bat"
    commandline="cmd /c Heaven_d3d9.bat"

    # Install if needed
    if ! test -f "$exe"
    then
        sh wisotool unigine_heaven
    fi

    # Can this be scraped/controlled at all with autohotkey?  Maybe if run in window...
    cd "$exedir"
    $WINE $commandline
    cd "$olddir"
}

announce() {
   echo ">> $*"
   eval $1 $2 $3 $4 $5 $6 $7 $8 $9
}

do_system_description() {
    echo ">>-------- begin system description ---------"
    echo "Host Name: $host"
    echo "CPU Type: $cputype"
    echo "Graphics Card: $gputype"
    echo "Operating System: $osname"
    echo "Wine Version: $wineversion"

    cat "$YAGMARK_TMP"/sysinfo.txt

    case "$OS" in
    "Windows_NT")
        ;;
    *)
       announce glxinfo \| egrep 'vendor\|renderer\|version'
       announce dmesg \| grep NVIDIA | grep loading | tail -n 1
    ;;
    esac
    echo ">>-------- end system description ---------"
}

do_report() {
    echo ">>-------- begin yagmark report ---------"
    announce date
    echo ">>-------- begin summary ---------"
    for file in "$YAGMARK_RESULTS"/*.parsed
    do
       cat $file
    done
    echo ">>-------- end summary ---------"
    for file in "$YAGMARK_RESULTS"/*.txt
    do
       echo ">>-------- begin $file ---------"
       tr -d '\000' < "$file"
       echo ">>-------- end $file ---------"
    done

    do_system_description

    echo ">>-------- end yagmark report ---------"
}

# TODO: add a wisotool-style menu
for cmd
do
   echo running run_$cmd
   run_$cmd
done

echo running do_report
do_report > tmp.txt
mkdir -p results/"$SYSTEMID"
mv tmp.txt results/"$SYSTEMID"/"$SYSTEMID"-`date +%F-%H.%M`.txt
echo done
